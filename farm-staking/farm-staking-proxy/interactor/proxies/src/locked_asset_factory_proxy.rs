// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct LockedAssetFactoryProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for LockedAssetFactoryProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = LockedAssetFactoryProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        LockedAssetFactoryProxyMethods { wrapped_tx: tx }
    }
}

pub struct LockedAssetFactoryProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> LockedAssetFactoryProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> LockedAssetFactoryProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn upgrade(
        self,
    ) -> TxTypedUpgrade<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_upgrade()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> LockedAssetFactoryProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn whitelist<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("whitelist")
            .argument(&address)
            .original_result()
    }

    pub fn remove_whitelist<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("removeWhitelist")
            .argument(&address)
            .original_result()
    }

    pub fn create_and_forward_custom_period<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<u64>,
        Arg3: ProxyArg<common_structs::locked_token_types::UnlockSchedule<Env::Api>>,
    >(
        self,
        amount: Arg0,
        address: Arg1,
        start_epoch: Arg2,
        unlock_period: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, OldEsdtTokenPayment<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createAndForwardCustomPeriod")
            .argument(&amount)
            .argument(&address)
            .argument(&start_epoch)
            .argument(&unlock_period)
            .original_result()
    }

    pub fn create_and_forward<
        Arg0: ProxyArg<BigUint<Env::Api>>,
        Arg1: ProxyArg<ManagedAddress<Env::Api>>,
        Arg2: ProxyArg<u64>,
    >(
        self,
        amount: Arg0,
        address: Arg1,
        start_epoch: Arg2,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, OldEsdtTokenPayment<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("createAndForward")
            .argument(&amount)
            .argument(&address)
            .argument(&start_epoch)
            .original_result()
    }

    pub fn unlock_assets(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, ()> {
        self.wrapped_tx
            .raw_call("unlockAssets")
            .original_result()
    }

    pub fn set_transfer_role_for_address<
        Arg0: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
    >(
        self,
        opt_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setTransferRoleForAddress")
            .argument(&opt_address)
            .original_result()
    }

    pub fn unset_transfer_role_for_address<
        Arg0: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
    >(
        self,
        opt_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unsetTransferRoleForAddress")
            .argument(&opt_address)
            .original_result()
    }

    pub fn set_burn_role_for_address<
        Arg0: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
    >(
        self,
        opt_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setBurnRoleForAddress")
            .argument(&opt_address)
            .original_result()
    }

    pub fn last_error_message(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLastErrorMessage")
            .original_result()
    }

    pub fn init_epoch(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getInitEpoch")
            .original_result()
    }

    pub fn get_whitelisted_contracts(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValueEncoded<Env::Api, ManagedAddress<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getWhitelistedContracts")
            .original_result()
    }

    pub fn default_unlock_period(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, common_structs::locked_token_types::UnlockSchedule<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getDefaultUnlockPeriod")
            .original_result()
    }

    pub fn locked_asset_token_id(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getLockedAssetTokenId")
            .original_result()
    }

    pub fn asset_token_id(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, TokenIdentifier<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getAssetTokenId")
            .original_result()
    }

    pub fn get_unlock_schedule_for_sft_nonce<
        Arg0: ProxyArg<u64>,
    >(
        self,
        nonce: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, Option<common_structs::locked_token_types::UnlockScheduleEx<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getUnlockScheduleForSFTNonce")
            .argument(&nonce)
            .original_result()
    }

    pub fn get_cache_size(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, usize> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getCacheSize")
            .original_result()
    }

    pub fn extended_attributes_activation_nonce(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u64> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getExtendedAttributesActivationNonce")
            .original_result()
    }

    pub fn set_new_factory_address<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
    >(
        self,
        sc_address: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setNewFactoryAddress")
            .argument(&sc_address)
            .original_result()
    }

    pub fn pause_endpoint(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("pause")
            .original_result()
    }

    pub fn unpause_endpoint(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("unpause")
            .original_result()
    }

    pub fn paused_status(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, bool> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("isPaused")
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode)]
pub struct OldEsdtTokenPayment<Api>
where
    Api: ManagedTypeApi,
{
    pub token_type: EsdtTokenType,
    pub payment: EsdtTokenPayment<Api>,
}

#[type_abi]
#[derive(TopEncode, TopDecode)]
pub struct CreateAndForwardEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub caller: ManagedAddress<Api>,
    pub destination: ManagedAddress<Api>,
    pub locked_asset_token_id: TokenIdentifier<Api>,
    pub locked_asset_token_nonce: u64,
    pub locked_asset_token_amount: BigUint<Api>,
    pub locked_assets_attributes: common_structs::locked_token_types::LockedAssetTokenAttributesEx<Api>,
    pub start_epoch: u64,
    pub block: u64,
    pub epoch: u64,
    pub timestamp: u64,
}

#[type_abi]
#[derive(TopEncode, TopDecode)]
pub struct UnlockAssetsEvent<Api>
where
    Api: ManagedTypeApi,
{
    pub caller: ManagedAddress<Api>,
    pub input_locked_assets_token_id: TokenIdentifier<Api>,
    pub input_locked_assets_token_nonce: u64,
    pub input_locked_assets_token_amount: BigUint<Api>,
    pub output_locked_assets_token_id: TokenIdentifier<Api>,
    pub output_locked_assets_token_nonce: u64,
    pub output_locked_assets_token_amount: BigUint<Api>,
    pub asset_token_id: TokenIdentifier<Api>,
    pub asset_token_amount: BigUint<Api>,
    pub input_assets_attributes: common_structs::locked_token_types::LockedAssetTokenAttributesEx<Api>,
    pub output_assets_attributes: common_structs::locked_token_types::LockedAssetTokenAttributesEx<Api>,
    pub block: u64,
    pub epoch: u64,
    pub timestamp: u64,
}
