// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct PairMockProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for PairMockProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = PairMockProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        PairMockProxyMethods { wrapped_tx: tx }
    }
}

pub struct PairMockProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> PairMockProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init<
        Arg0: ProxyArg<OptionalValue<TokenIdentifier<Env::Api>>>,
        Arg1: ProxyArg<OptionalValue<TokenIdentifier<Env::Api>>>,
        Arg2: ProxyArg<OptionalValue<TokenIdentifier<Env::Api>>>,
        Arg3: ProxyArg<OptionalValue<ManagedAddress<Env::Api>>>,
        Arg4: ProxyArg<OptionalValue<bool>>,
        Arg5: ProxyArg<OptionalValue<bool>>,
    >(
        self,
        first_token_id: Arg0,
        second_token_id: Arg1,
        lp_token_id: Arg2,
        initial_liquidity_adder: Arg3,
        state: Arg4,
        skip_minting_lp_tokens: Arg5,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .argument(&first_token_id)
            .argument(&second_token_id)
            .argument(&lp_token_id)
            .argument(&initial_liquidity_adder)
            .argument(&state)
            .argument(&skip_minting_lp_tokens)
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> PairMockProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn add_initial_liquidity(
        self,
    ) -> TxTypedCall<Env, From, To, (), Gas, MultiValue3<EsdtTokenPayment<Env::Api>, EsdtTokenPayment<Env::Api>, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .raw_call("addInitialLiquidity")
            .original_result()
    }

    pub fn get_tokens_for_given_position_with_safe_price<
        Arg0: ProxyArg<BigUint<Env::Api>>,
    >(
        self,
        liquidity: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, MultiValue2<EsdtTokenPayment<Env::Api>, EsdtTokenPayment<Env::Api>>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getTokensForGivenPositionWithSafePrice")
            .argument(&liquidity)
            .original_result()
    }
}
